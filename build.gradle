def bmotionVersion = '0.2.0-SNAPSHOT'
def probVersion = 'milestone-25'

def targets = ["linux32", "linux64", "osx64", "win32"]
def serverTargetMapping = ["linux32": "linux32", "linux64": "linux64", "osx64": "leopard64", "win32": "win32"]

def download(String address, String target) {
    def file = new FileOutputStream(target)
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}

// ----------------------------------------
// Helper methods ...
// ----------------------------------------
def downloadClientData() {
    println "Downloading Standalone client data..."
    // Prepare folders ...
    def cssDir = new File('build/resources/client/css')
    def jsDir = new File('build/resources/client/js')
    if (!cssDir.exists()) cssDir.mkdirs()
    if (!jsDir.exists()) jsDir.mkdirs()
    // Download current data
    def String url = "http://nightly.cobra.cs.uni-duesseldorf.de/bmotion/bmotion-prob-frontend"
    download(url + '/js/bmotion.standalone.js', 'build/resources/client/js/bmotion.standalone.js')
    download(url + '/css/bmotion.min.css', 'build/resources/client/css/bmotion.min.css')
    println " done."
}

def download_cspm(String target) {
    def String downloadFile = target
    def String postfix = ""
    if (target == "win32") {
        downloadFile = "windows"
        postfix = ".exe"
    }
    def String url = "http://nightly.cobra.cs.uni-duesseldorf.de/cspmf/cspmf-" + downloadFile
    println "Downloading cspm for " + target + " ..."
    def String dir = "build/cli/" + target + "_cli/cli/lib/cspmf" + postfix
    download(url, dir)
    new File(dir).setExecutable(true)
    println " done."
}

def download_cli(target, probVersion) {
    def downloadFile = target
    def String dir = "build/cli/" + target + "_cli/cli"
    def d = new File(dir)
    delete file(d)
    d.mkdirs();
    def url = "http://nightly.cobra.cs.uni-duesseldorf.de/tmp/" + probVersion + "/probcli_" + downloadFile + ".zip"
    //def nwurl = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/probcli_"+downloadFile+".zip"
    println "Downloading cli for " + target + " ..."
    def String targetzip = dir + "probcli.zip"
    download(url, targetzip)
    println " done."
    FileTree zip = zipTree(targetzip)
    println "Unzipping " + zip
    copy {
        from zip
        into dir
    }
    delete file(targetzip)
}


apply plugin: 'java'
apply plugin: 'maven'

sourceCompatibility = 1.6

repositories {
    maven {
        name "cobra"
        url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
    }
}

sourceSets.main.java.srcDir 'src/main/java' // ie include the 'java' dir as groovy source

configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }

dependencies {
    compile group: 'de.bmotion', name: 'bmotion-prob', version: bmotionVersion, changing: true
}

jar {
    manifest {
        attributes 'Implementation-Title': 'BMotion Studio for ProB Start',
                'Implementation-Version': bmotionVersion,
                'Main-Class': 'Start'
    }
}

// Extend clean task ...
clean {
    delete("cli")
    delete("build")
}

task copyClientData(type: Copy) {
    from 'resources/standalone'
    into 'build/resources/client'
}

task getClientData(dependsOn: copyClientData) << {
    downloadClientData()
}

task npmDeps(type: Exec) {
    commandLine "npm", 'install', '-g', 'node-webkit-builder'
}

task getLibs(dependsOn: jar) << {
    copy {
        from configurations.compile
        into 'build/resources/client/libs/libs'
    }
    copy {
        from 'build/libs/bmotion-prob-standalone.jar'
        into 'build/resources/client/libs'
    }
}

serverTargetMapping.each() { k, v ->

    task "downloadCli_${k}" << {
        download_cli(v, probVersion)
        download_cspm(v)
    }

    task "buildClient_${k}"(dependsOn: [npmDeps, getLibs, "getCli_${k}", getClientData], type: Exec) {
        commandLine "nwbuild", '-v', '0.12.1', '-o', 'build/client', '-p', k, 'build/resources/client'
    }

    task "getCli_${k}"(dependsOn: "downloadCli_${k}") << {
        copy {
            from 'build/cli/' + k + '_cli'
            into 'build/resources/client'
        }
    }

    task "zip_${k}"(dependsOn: [], type: Zip) {
        destinationDir = new File('build/distribution/' + bmotionVersion)
        archiveName = 'bmotion-prob-standalone-' + bmotionVersion + '-' + k + '.zip'
        from('build/client/bmotion-prob/' + k) {
            into "./bmotion-prob-" + bmotionVersion
        }
    }

    task "standalone_${k}"(dependsOn: ["buildClient_${k}", "zip_${k}"]) {}

}

task standalone_all(dependsOn: [tasks.withType(Exec).matching { task -> task.name.startsWith('buildClient_') }, tasks.withType(Zip).matching { task -> task.name.startsWith('zip_') }]) << {
}

