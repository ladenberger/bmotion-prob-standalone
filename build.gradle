def bmotionVersion = '0.2.4-SNAPSHOT'
def probVersion = 'milestone-28'

def targets = ["linux32": "linux32", "linux64": "linux64", "osx64": "leopard64", "win32": "win32"]

def download(String address, String target) {
    def file = new FileOutputStream(target)
    def out = new BufferedOutputStream(file)
    out << new URL(address).openStream()
    out.close()
}

// ----------------------------------------
// Helper methods ...
// ----------------------------------------
def download_cspm(String target) {
    def String downloadFile = target
    def String postfix = ""
    if (target == "win32") {
        downloadFile = "windows"
        postfix = ".exe"
    }
    def String url = "http://nightly.cobra.cs.uni-duesseldorf.de/cspmf/cspmf-" + downloadFile
    println "Downloading cspm for " + target + " ..."
    def String dir = "build/resources/cli/" + target + "_cli/cli/lib/cspmf" + postfix
    download(url, dir)
    new File(dir).setExecutable(true)
    println " done."
}

def download_cli(target, probVersion) {
    def downloadFile = target
    def String dir = "build/resources/cli/" + target + "_cli/cli"
    def d = new File(dir)
    delete file(d)
    d.mkdirs();
    def url = "http://nightly.cobra.cs.uni-duesseldorf.de/tmp/" + probVersion + "/probcli_" + downloadFile + ".zip"
    //def nwurl = "http://nightly.cobra.cs.uni-duesseldorf.de/cli/probcli_"+downloadFile+".zip"
    println "Downloading cli for " + target + " ..."
    def String targetzip = dir + "probcli.zip"
    download(url, targetzip)
    println " done."
    FileTree zip = zipTree(targetzip)
    println "Unzipping " + zip
    copy {
        from zip
        into dir
    }
    delete file(targetzip)
}


apply plugin: 'java'
apply plugin: 'application'

mainClassName = "de.bms.prob.Online"

sourceCompatibility = 1.6

repositories {
    mavenCentral()
    maven {
        name "sonatype snapshots"
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name "cobra"
        url "http://cobra.cs.uni-duesseldorf.de/artifactory/repo"
    }
}

configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }

dependencies {
    compile group: 'de.hhu.stups', name: 'bmotion-prob', version: bmotionVersion, changing: true
}

// Extend clean task ...
clean {
    delete("build")
}

targets.each() { k, v ->

    task "downloadCli_${k}" << {
        download_cli(v, probVersion)
        download_cspm(v)
    }

    task "zip_${k}"(dependsOn: ["downloadCli_${k}", installApp], type: Zip) {
        destinationDir = new File('build/distribution/' + bmotionVersion)
        archiveName = 'bmotion-prob-standalone-' + bmotionVersion + '-' + k + '.zip'
        from('build/resources/cli/' + k + '_cli') {
            into "./bmotion-prob-" + bmotionVersion
        }
        from('build/install/bmotion-prob-standalone/') {
            into "./bmotion-prob-" + bmotionVersion
        }
    }

    task "standalone_${k}"(dependsOn: ["zip_${k}"]) {}

}

// Very ugly ... Someone knows a better way???
startScripts {
    doLast {
        unixScript.text = unixScript.text.
                replace('exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" ' + mainClassName + ' "$@"',
                        'exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" -Dprob.home=${APP_HOME}/cli/ ' + mainClassName + ' "$@"')
        windowsScript.text = windowsScript.text.replace(
                '"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %BMOTION_PROB_OPTS%  -classpath "%CLASSPATH%" ' + mainClassName + ' %CMD_LINE_ARGS%',
                '"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %B_MOTION_STUDIO_OPTS%  -classpath "%CLASSPATH%" -Dprob.home=%APP_HOME%/cli/ ' + mainClassName)
    }
}
